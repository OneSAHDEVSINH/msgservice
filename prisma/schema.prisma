//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Template {
  id                String             @id() @default(uuid())
  name              String
  content           String
  userId            String
  user              User?              @relation(fields: [userId], references: [id], name: "user")
  templatePurchases TemplatePurchase[] @relation("template")
  messageCampaigns  MessageCampaign[]  @relation("template")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TemplatePurchase {
  id           String    @id() @default(uuid())
  purchaseDate String
  price        String
  userId       String
  user         User?     @relation(fields: [userId], references: [id], name: "user")
  templateId   String
  template     Template? @relation(fields: [templateId], references: [id], name: "template")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model MessageCampaign {
  id                String             @id() @default(uuid())
  name              String
  status            String
  startDate         String?
  endDate           String?
  userId            String
  user              User?              @relation(fields: [userId], references: [id], name: "user")
  templateId        String
  template          Template?          @relation(fields: [templateId], references: [id], name: "template")
  messageRecipients MessageRecipient[] @relation("messageCampaign")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
}

/// @@allow('all', true)
model MessageRecipient {
  id                String           @id() @default(uuid())
  phoneNumber       String
  status            String
  sentAt            String?
  messageCampaignId String
  messageCampaign   MessageCampaign? @relation(fields: [messageCampaignId], references: [id], name: "messageCampaign")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model WhatsAppIntegration {
  id          String   @id() @default(uuid())
  apiKey      String
  phoneNumber String
  status      String
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SubscriptionPlan {
  id          String   @id() @default(uuid())
  name        String
  description String?
  price       String
  duration    Float
  features    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                   String                @id() @default(uuid())
  name                 String?
  email                String?               @unique()
  pictureUrl           String?               @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation      String?
  emailVerified        Boolean?
  stripeCustomerId     String?
  status               UserStatus            @default(VERIFIED)
  globalRole           String                @default("USER")
  /// @password
  /// @omit
  password             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt()
  accounts             Account[]
  sessions             Session[]
  organizationRoles    OrganizationRole[]
  pushNotifications    PushNotification[]    @relation("user")
  templates            Template[]            @relation("user")
  templatePurchases    TemplatePurchase[]    @relation("user")
  messageCampaigns     MessageCampaign[]     @relation("user")
  whatsAppIntegrations WhatsAppIntegration[] @relation("user")
}

/// @@allow('all', true)
model PushNotification {
  id           String   @id() @default(uuid())
  endpoint     String
  subscription String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
  userId       String
  user         User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
